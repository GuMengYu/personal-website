/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: 'sanity.imagePaletteSwatch'
    background?: string
    foreground?: string
    population?: number
    title?: string
}

export type SanityImagePalette = {
    _type: 'sanity.imagePalette'
    darkMuted?: SanityImagePaletteSwatch
    lightVibrant?: SanityImagePaletteSwatch
    darkVibrant?: SanityImagePaletteSwatch
    vibrant?: SanityImagePaletteSwatch
    dominant?: SanityImagePaletteSwatch
    lightMuted?: SanityImagePaletteSwatch
    muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
    _type: 'sanity.imageDimensions'
    height?: number
    width?: number
    aspectRatio?: number
}

export type SanityFileAsset = {
    _id: string
    _type: 'sanity.fileAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    source?: SanityAssetSourceData
}

export type Geopoint = {
    _type: 'geopoint'
    lat?: number
    lng?: number
    alt?: number
}

export type Project = {
    _id: string
    _type: 'project'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: Array<
        {
            _key: string
        } & InternationalizedArrayStringValue
    >
    slug?: Slug
    url?: string
    sourceCodeUrl?: string
    description?: Array<
        {
            _key: string
        } & InternationalizedArrayTextValue
    >
    tags?: Array<string>
    coverImage?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    content?: Array<
        {
            _key: string
        } & InternationalizedArrayFormattedTextValue
    >
}

export type InstantFilm = {
    _id: string
    _type: 'instantFilm'
    _createdAt: string
    _updatedAt: string
    _rev: string
    instantFilms?: Array<{
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
    }>
}

export type Gallery = {
    _id: string
    _type: 'gallery'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: Array<
        {
            _key: string
        } & InternationalizedArrayStringValue
    >
    slug?: Slug
    photographDate?: string
    publishDate?: string
    images?: Array<{
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
    }>
    description?: Array<
        {
            _key: string
        } & InternationalizedArrayTextValue
    >
}

export type InternationalizedArrayFormattedTextValue = {
    _type: 'internationalizedArrayFormattedTextValue'
    value?: Array<
        | {
              children?: Array<{
                  marks?: Array<string>
                  text?: string
                  _type: 'span'
                  _key: string
              }>
              style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
              listItem?: 'bullet' | 'number'
              markDefs?: Array<{
                  href?: string
                  _type: 'link'
                  _key: string
              }>
              level?: number
              _type: 'block'
              _key: string
          }
        | {
              asset?: {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
              }
              hotspot?: SanityImageHotspot
              crop?: SanityImageCrop
              _type: 'image'
              _key: string
          }
    >
}

export type InternationalizedArrayTextValue = {
    _type: 'internationalizedArrayTextValue'
    value?: string
}

export type InternationalizedArrayStringValue = {
    _type: 'internationalizedArrayStringValue'
    value?: string
}

export type InternationalizedArrayFormattedText = Array<
    {
        _key: string
    } & InternationalizedArrayFormattedTextValue
>

export type SanityImageCrop = {
    _type: 'sanity.imageCrop'
    top?: number
    bottom?: number
    left?: number
    right?: number
}

export type SanityImageHotspot = {
    _type: 'sanity.imageHotspot'
    x?: number
    y?: number
    height?: number
    width?: number
}

export type SanityImageAsset = {
    _id: string
    _type: 'sanity.imageAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    metadata?: SanityImageMetadata
    source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
    _type: 'sanity.assetSourceData'
    name?: string
    id?: string
    url?: string
}

export type SanityImageMetadata = {
    _type: 'sanity.imageMetadata'
    location?: Geopoint
    dimensions?: SanityImageDimensions
    palette?: SanityImagePalette
    lqip?: string
    blurHash?: string
    hasAlpha?: boolean
    isOpaque?: boolean
}

export type InternationalizedArrayText = Array<
    {
        _key: string
    } & InternationalizedArrayTextValue
>

export type InternationalizedArrayString = Array<
    {
        _key: string
    } & InternationalizedArrayStringValue
>

export type MediaTag = {
    _id: string
    _type: 'media.tag'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: Slug
}

export type Slug = {
    _type: 'slug'
    current?: string
    source?: string
}
export declare const internalGroqTypeReferenceTo: unique symbol


// Source: ../app/server/api/instant-films.get.ts
// Variable: instantFilmsQuery
// Query: *[_type == "instantFilm"][0].instantFilms[-5..-1]{    ...,    asset->,}
export type InstantFilmsQueryResult = Array<{
    asset: {
        _id: string
        _type: 'sanity.imageAsset'
        _createdAt: string
        _updatedAt: string
        _rev: string
        originalFilename?: string
        label?: string
        title?: string
        description?: string
        altText?: string
        sha1hash?: string
        extension?: string
        mimeType?: string
        size?: number
        assetId?: string
        uploadId?: string
        path?: string
        url?: string
        metadata?: SanityImageMetadata
        source?: SanityAssetSourceData
    } | null
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
}> | null


// Source: ../app/server/api/galleries/[slug].get.ts
// Variable: galleryQuery
// Query: *[_type == "gallery" && slug.current == $slug][0]{        ...,        images[]{            ...,            asset->        }    }
export type GalleryQueryResult = {
    _id: string
    _type: 'gallery'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: Array<
        {
            _key: string
        } & InternationalizedArrayStringValue
    >
    slug?: Slug
    photographDate?: string
    publishDate?: string
    images: Array<{
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata?: SanityImageMetadata
            source?: SanityAssetSourceData
        } | null
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }> | null
    description?: Array<
        {
            _key: string
        } & InternationalizedArrayTextValue
    >
} | null


// Source: ../app/server/api/galleries/index.get.ts
// Variable: galleriesQuery
// Query: *[_type == "gallery"]{    "id": _id,    name,    description,    photographDate,    publishDate,    "slug": slug.current,    "coverImage": images[0]{        ...,        asset->    },    "imageCount": count(images)} | order(    select(        photographDate != null => photographDate,        publishDate != null => publishDate,    )    desc)
export type GalleriesQueryResult = Array<{
    id: string
    name: Array<
        {
            _key: string
        } & InternationalizedArrayStringValue
    > | null
    description: Array<
        {
            _key: string
        } & InternationalizedArrayTextValue
    > | null
    photographDate: string | null
    publishDate: string | null
    slug: string | null
    coverImage: {
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata?: SanityImageMetadata
            source?: SanityAssetSourceData
        } | null
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    } | null
    imageCount: number | null
}>


// Source: ../app/server/api/projects/[slug].get.ts
// Variable: projectQuery
// Query: *[_type == "project" && slug.current == $slug][0]{        ...,        coverImage{            ...,            asset->        },        content[]{            ...,            value[]{              ...,              _type == "image" => {                ...,                asset->              }            }        }    }
export type ProjectQueryResult = {
    _id: string
    _type: 'project'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: Array<
        {
            _key: string
        } & InternationalizedArrayStringValue
    >
    slug?: Slug
    url?: string
    sourceCodeUrl?: string
    description?: Array<
        {
            _key: string
        } & InternationalizedArrayTextValue
    >
    tags?: Array<string>
    coverImage: {
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata?: SanityImageMetadata
            source?: SanityAssetSourceData
        } | null
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    } | null
    content: Array<{
        _key: string
        value: Array<
            | {
                  asset: {
                      _id: string
                      _type: 'sanity.imageAsset'
                      _createdAt: string
                      _updatedAt: string
                      _rev: string
                      originalFilename?: string
                      label?: string
                      title?: string
                      description?: string
                      altText?: string
                      sha1hash?: string
                      extension?: string
                      mimeType?: string
                      size?: number
                      assetId?: string
                      uploadId?: string
                      path?: string
                      url?: string
                      metadata?: SanityImageMetadata
                      source?: SanityAssetSourceData
                  } | null
                  hotspot?: SanityImageHotspot
                  crop?: SanityImageCrop
                  _type: 'image'
              }
            | {
                  children?: Array<{
                      marks?: Array<string>
                      text?: string
                      _type: 'span'
                      _key: string
                  }>
                  style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
                  listItem?: 'bullet' | 'number'
                  markDefs?: Array<{
                      href?: string
                      _type: 'link'
                      _key: string
                  }>
                  level?: number
                  _type: 'block'
              }
        > | null
    }> | null
} | null


// Source: ../app/server/api/projects/index.get.ts
// Variable: projectsQuery
// Query: *[_type == "project"]{    "id": _id,    name,    description,    "slug": slug.current,    tags,    url,    sourceCodeUrl,    coverImage{      asset->    }}
export type ProjectsQueryResult = Array<{
    id: string
    name: Array<
        {
            _key: string
        } & InternationalizedArrayStringValue
    > | null
    description: Array<
        {
            _key: string
        } & InternationalizedArrayTextValue
    > | null
    slug: string | null
    tags: Array<string> | null
    url: string | null
    sourceCodeUrl: string | null
    coverImage: {
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata?: SanityImageMetadata
            source?: SanityAssetSourceData
        } | null
    } | null
}>


